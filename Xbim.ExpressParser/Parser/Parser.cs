// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  C13300493
// DateTime: 15/07/2015 08:44:35
// UserName: mxfm2
// Input file <Parser.y - 15/07/2015 08:44:26>

// options: conflicts lines gplex conflicts listing

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Xbim.Gppg;
using System.Linq.Expressions;
using Xbim.ExpressParser.SDAI;

namespace Xbim.ExpressParser
{
internal enum Tokens {error=126,
    EOF=127,INTEGER=128,STRING=129,BOOLEAN=130,LOGICAL=131,BINARY=132,
    REAL=133,ARRAY=134,LIST=135,SET=136,BAG=137,IDENTIFIER=138,
    OF=139,FOR=140,FIXED=141,UNIQUE=142,ONEOF=143,INVERSE=144,
    OPTIONAL=145,SCHEMA=146,END_SCHEMA=147,TYPE=148,END_TYPE=149,ENUMERATION_OF=150,
    SELECT=151,ENTITY=152,END_ENTITY=153,SUBTYPE_OF=154,SUPERTYPE_OF=155,ABSTRACT=156,
    NON_ABSTRACT=157,DERIVE=158,FUNCTION=159,END_FUNCTION=160,RULE=161,END_RULE=162,
    WHERE=163,SELF=164,IN=165,AND=166,OR=167,XOR=168,
    NOT=169,EXISTS=170,SIZEOF=171,QUERY=172,ASSIGNMENT=173,GT=174,
    LT=175,GTE=176,LTE=177,NEQ=178,BACKSLASH=179};

internal partial struct ValueType
#line 16 "Parser.y"
{
#line 17 "Parser.y"
		public string strVal;
#line 18 "Parser.y"
		public int intVal;
#line 19 "Parser.y"
		public double realVal;
#line 20 "Parser.y"
		public bool boolVal;
#line 21 "Parser.y"
		public object val;
#line 22 "Parser.y"
		public Tokens tokVal;
#line 23 "Parser.y"
	  }
// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from Parser.y - 15/07/2015 08:44:26
#line 2 "Parser.y"
	
  // End verbatim content from Parser.y - 15/07/2015 08:44:26

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[104];
  private static State[] states = new State[263];
  private static string[] nonTerms = new string[] {
      "schema_definition", "$accept", "definitions", "definition", "type_definition", 
      "enumeration", "select_type", "entity", "function", "rule", "identifier_or_type", 
      "enumerable", "where_section", "identifier_list", "sections", "identifiers", 
      "type", "number", "section", "parameter_section", "unique_section", "inverse_section", 
      "derive_section", "inheritance_section", "parameter_definition", "parameter_definition_right", 
      "where_rules", "where_rule", "string_array", "comparer", "accessor", "strings", 
      "unique_rules", "unique_rule", "inverse_rules", "inverse_rule", "derive_rules", 
      "derive_rule", "optional_integer", "inheritance_definition", };

  static Parser() {
    states[0] = new State(new int[]{146,3},new int[]{-1,1});
    states[1] = new State(new int[]{127,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{138,4});
    states[4] = new State(new int[]{59,5});
    states[5] = new State(new int[]{148,11,152,141,159,250,161,256},new int[]{-3,6,-4,262,-5,10,-6,138,-7,139,-8,140,-9,249,-10,255});
    states[6] = new State(new int[]{147,7,148,11,152,141,159,250,161,256},new int[]{-4,9,-5,10,-6,138,-7,139,-8,140,-9,249,-10,255});
    states[7] = new State(new int[]{59,8});
    states[8] = new State(-2);
    states[9] = new State(-4);
    states[10] = new State(-5);
    states[11] = new State(new int[]{138,12});
    states[12] = new State(new int[]{61,13});
    states[13] = new State(new int[]{150,95,151,106,138,83,133,89,130,90,132,91,129,92,128,93,131,94,136,111,135,120,134,126,137,132},new int[]{-11,14,-12,74,-17,84});
    states[14] = new State(new int[]{59,15});
    states[15] = new State(new int[]{149,16,163,21},new int[]{-13,18});
    states[16] = new State(new int[]{59,17});
    states[17] = new State(-11);
    states[18] = new State(new int[]{149,19});
    states[19] = new State(new int[]{59,20});
    states[20] = new State(-13);
    states[21] = new State(new int[]{138,24},new int[]{-27,22,-28,73});
    states[22] = new State(new int[]{138,24,149,-51,153,-51,163,-51,142,-51,144,-51,158,-51,154,-51,155,-51,156,-51},new int[]{-28,23});
    states[23] = new State(-53);
    states[24] = new State(new int[]{58,25});
    states[25] = new State(new int[]{126,26,164,28,123,65,138,49},new int[]{-31,59});
    states[26] = new State(new int[]{59,27});
    states[27] = new State(-54);
    states[28] = new State(new int[]{165,29,179,45,174,53,175,54,176,55,177,56,178,57,61,58},new int[]{-30,38});
    states[29] = new State(new int[]{91,32},new int[]{-29,30});
    states[30] = new State(new int[]{59,31});
    states[31] = new State(-55);
    states[32] = new State(new int[]{129,37},new int[]{-32,33});
    states[33] = new State(new int[]{93,34,44,35});
    states[34] = new State(-67);
    states[35] = new State(new int[]{129,36});
    states[36] = new State(-69);
    states[37] = new State(-68);
    states[38] = new State(new int[]{138,41,128,43,133,44},new int[]{-18,39});
    states[39] = new State(new int[]{59,40});
    states[40] = new State(-56);
    states[41] = new State(new int[]{59,42});
    states[42] = new State(-57);
    states[43] = new State(-32);
    states[44] = new State(-33);
    states[45] = new State(new int[]{138,49,164,52},new int[]{-31,46});
    states[46] = new State(new int[]{46,47,174,-103,175,-103,176,-103,177,-103,178,-103,61,-103,58,-103});
    states[47] = new State(new int[]{138,48});
    states[48] = new State(-102);
    states[49] = new State(new int[]{46,50});
    states[50] = new State(new int[]{138,51});
    states[51] = new State(-101);
    states[52] = new State(new int[]{179,45});
    states[53] = new State(-61);
    states[54] = new State(-62);
    states[55] = new State(-63);
    states[56] = new State(-64);
    states[57] = new State(-65);
    states[58] = new State(-66);
    states[59] = new State(new int[]{46,47,174,53,175,54,176,55,177,56,178,57,61,58},new int[]{-30,60});
    states[60] = new State(new int[]{138,63,128,43,133,44},new int[]{-18,61});
    states[61] = new State(new int[]{59,62});
    states[62] = new State(-58);
    states[63] = new State(new int[]{59,64});
    states[64] = new State(-59);
    states[65] = new State(new int[]{128,43,133,44},new int[]{-18,66});
    states[66] = new State(new int[]{174,53,175,54,176,55,177,56,178,57,61,58},new int[]{-30,67});
    states[67] = new State(new int[]{164,68});
    states[68] = new State(new int[]{174,53,175,54,176,55,177,56,178,57,61,58},new int[]{-30,69});
    states[69] = new State(new int[]{128,43,133,44},new int[]{-18,70});
    states[70] = new State(new int[]{125,71});
    states[71] = new State(new int[]{59,72});
    states[72] = new State(-60);
    states[73] = new State(-52);
    states[74] = new State(new int[]{139,75});
    states[75] = new State(new int[]{138,83,133,89,130,90,132,91,129,92,128,93,131,94},new int[]{-11,76,-17,84});
    states[76] = new State(new int[]{59,77});
    states[77] = new State(new int[]{149,78,163,21},new int[]{-13,80});
    states[78] = new State(new int[]{59,79});
    states[79] = new State(-12);
    states[80] = new State(new int[]{149,81});
    states[81] = new State(new int[]{59,82});
    states[82] = new State(-14);
    states[83] = new State(-30);
    states[84] = new State(new int[]{40,85,59,-31,173,-31});
    states[85] = new State(new int[]{128,86});
    states[86] = new State(new int[]{41,87});
    states[87] = new State(new int[]{141,88,40,-28,59,-28,173,-28});
    states[88] = new State(-29);
    states[89] = new State(-22);
    states[90] = new State(-23);
    states[91] = new State(-24);
    states[92] = new State(-25);
    states[93] = new State(-26);
    states[94] = new State(-27);
    states[95] = new State(new int[]{40,100},new int[]{-14,96});
    states[96] = new State(new int[]{59,97});
    states[97] = new State(new int[]{149,98});
    states[98] = new State(new int[]{59,99});
    states[99] = new State(-15);
    states[100] = new State(new int[]{138,105},new int[]{-16,101});
    states[101] = new State(new int[]{41,102,44,103});
    states[102] = new State(-19);
    states[103] = new State(new int[]{138,104});
    states[104] = new State(-21);
    states[105] = new State(-20);
    states[106] = new State(new int[]{40,100},new int[]{-14,107});
    states[107] = new State(new int[]{59,108});
    states[108] = new State(new int[]{149,109});
    states[109] = new State(new int[]{59,110});
    states[110] = new State(-16);
    states[111] = new State(new int[]{91,112});
    states[112] = new State(new int[]{128,113});
    states[113] = new State(new int[]{58,114});
    states[114] = new State(new int[]{128,117,138,118,63,119},new int[]{-39,115});
    states[115] = new State(new int[]{93,116});
    states[116] = new State(-90);
    states[117] = new State(-87);
    states[118] = new State(-88);
    states[119] = new State(-89);
    states[120] = new State(new int[]{91,121});
    states[121] = new State(new int[]{128,122});
    states[122] = new State(new int[]{58,123});
    states[123] = new State(new int[]{128,117,138,118,63,119},new int[]{-39,124});
    states[124] = new State(new int[]{93,125});
    states[125] = new State(-91);
    states[126] = new State(new int[]{91,127});
    states[127] = new State(new int[]{128,128});
    states[128] = new State(new int[]{58,129});
    states[129] = new State(new int[]{128,117,138,118,63,119},new int[]{-39,130});
    states[130] = new State(new int[]{93,131});
    states[131] = new State(-92);
    states[132] = new State(new int[]{91,133});
    states[133] = new State(new int[]{128,134});
    states[134] = new State(new int[]{58,135});
    states[135] = new State(new int[]{128,117,138,118,63,119},new int[]{-39,136});
    states[136] = new State(new int[]{93,137});
    states[137] = new State(-93);
    states[138] = new State(-6);
    states[139] = new State(-7);
    states[140] = new State(-8);
    states[141] = new State(new int[]{138,142});
    states[142] = new State(new int[]{59,244,138,149,163,21,142,171,144,182,158,199,154,230,155,232,156,237},new int[]{-15,143,-19,248,-20,147,-25,168,-13,169,-21,170,-22,181,-23,198,-24,227,-40,243});
    states[143] = new State(new int[]{153,144,138,149,163,21,142,171,144,182,158,199,154,230,155,232,156,237},new int[]{-19,146,-20,147,-25,168,-13,169,-21,170,-22,181,-23,198,-24,227,-40,243});
    states[144] = new State(new int[]{59,145});
    states[145] = new State(-17);
    states[146] = new State(-35);
    states[147] = new State(new int[]{138,149,153,-36,163,-36,142,-36,144,-36,158,-36,154,-36,155,-36,156,-36},new int[]{-25,148});
    states[148] = new State(-43);
    states[149] = new State(new int[]{58,150});
    states[150] = new State(new int[]{145,153,138,83,133,89,130,90,132,91,129,92,128,93,131,94,136,111,135,120,134,126,137,132},new int[]{-26,151,-11,156,-17,84,-12,157});
    states[151] = new State(new int[]{59,152});
    states[152] = new State(-44);
    states[153] = new State(new int[]{138,83,133,89,130,90,132,91,129,92,128,93,131,94,136,111,135,120,134,126,137,132},new int[]{-26,154,-11,156,-17,84,-12,157});
    states[154] = new State(new int[]{59,155});
    states[155] = new State(-45);
    states[156] = new State(-46);
    states[157] = new State(new int[]{139,158});
    states[158] = new State(new int[]{142,160,138,83,133,89,130,90,132,91,129,92,128,93,131,94,136,111,135,120,134,126,137,132},new int[]{-11,159,-12,165,-17,84});
    states[159] = new State(-47);
    states[160] = new State(new int[]{138,83,133,89,130,90,132,91,129,92,128,93,131,94,136,111,135,120,134,126,137,132},new int[]{-11,161,-12,162,-17,84});
    states[161] = new State(-48);
    states[162] = new State(new int[]{139,163});
    states[163] = new State(new int[]{138,83,133,89,130,90,132,91,129,92,128,93,131,94},new int[]{-11,164,-17,84});
    states[164] = new State(-50);
    states[165] = new State(new int[]{139,166});
    states[166] = new State(new int[]{138,83,133,89,130,90,132,91,129,92,128,93,131,94},new int[]{-11,167,-17,84});
    states[167] = new State(-49);
    states[168] = new State(-42);
    states[169] = new State(-37);
    states[170] = new State(-38);
    states[171] = new State(new int[]{138,174},new int[]{-33,172,-34,180});
    states[172] = new State(new int[]{138,174,153,-70,163,-70,142,-70,144,-70,158,-70,154,-70,155,-70,156,-70},new int[]{-34,173});
    states[173] = new State(-74);
    states[174] = new State(new int[]{58,175});
    states[175] = new State(new int[]{138,176},new int[]{-16,178});
    states[176] = new State(new int[]{59,177,44,-20});
    states[177] = new State(-71);
    states[178] = new State(new int[]{59,179,44,103});
    states[179] = new State(-72);
    states[180] = new State(-73);
    states[181] = new State(-39);
    states[182] = new State(new int[]{138,185},new int[]{-35,183,-36,197});
    states[183] = new State(new int[]{138,185,153,-75,163,-75,142,-75,144,-75,158,-75,154,-75,155,-75,156,-75},new int[]{-36,184});
    states[184] = new State(-77);
    states[185] = new State(new int[]{58,186});
    states[186] = new State(new int[]{138,193,136,111,135,120,134,126,137,132},new int[]{-12,187});
    states[187] = new State(new int[]{139,188});
    states[188] = new State(new int[]{138,189});
    states[189] = new State(new int[]{140,190});
    states[190] = new State(new int[]{138,191});
    states[191] = new State(new int[]{59,192});
    states[192] = new State(-78);
    states[193] = new State(new int[]{140,194});
    states[194] = new State(new int[]{138,195});
    states[195] = new State(new int[]{59,196});
    states[196] = new State(-79);
    states[197] = new State(-76);
    states[198] = new State(-40);
    states[199] = new State(new int[]{138,202,164,52},new int[]{-37,200,-38,226,-31,220});
    states[200] = new State(new int[]{138,202,164,52,153,-80,163,-80,142,-80,144,-80,158,-80,154,-80,155,-80,156,-80},new int[]{-38,201,-31,220});
    states[201] = new State(-82);
    states[202] = new State(new int[]{58,203,46,50});
    states[203] = new State(new int[]{138,83,133,89,130,90,132,91,129,92,128,93,131,94,136,111,135,120,134,126,137,132},new int[]{-11,204,-12,208,-17,84});
    states[204] = new State(new int[]{173,205});
    states[205] = new State(new int[]{126,206});
    states[206] = new State(new int[]{59,207});
    states[207] = new State(-83);
    states[208] = new State(new int[]{139,209});
    states[209] = new State(new int[]{138,83,133,89,130,90,132,91,129,92,128,93,131,94,136,111,135,120,134,126,137,132},new int[]{-11,210,-12,214,-17,84});
    states[210] = new State(new int[]{173,211});
    states[211] = new State(new int[]{126,212});
    states[212] = new State(new int[]{59,213});
    states[213] = new State(-84);
    states[214] = new State(new int[]{139,215});
    states[215] = new State(new int[]{138,83,133,89,130,90,132,91,129,92,128,93,131,94},new int[]{-11,216,-17,84});
    states[216] = new State(new int[]{173,217});
    states[217] = new State(new int[]{126,218});
    states[218] = new State(new int[]{59,219});
    states[219] = new State(-85);
    states[220] = new State(new int[]{58,221,46,47});
    states[221] = new State(new int[]{138,83,133,89,130,90,132,91,129,92,128,93,131,94},new int[]{-11,222,-17,84});
    states[222] = new State(new int[]{173,223});
    states[223] = new State(new int[]{126,224});
    states[224] = new State(new int[]{59,225});
    states[225] = new State(-86);
    states[226] = new State(-81);
    states[227] = new State(new int[]{59,228,154,230,155,232,156,237},new int[]{-40,229});
    states[228] = new State(-41);
    states[229] = new State(-95);
    states[230] = new State(new int[]{40,100},new int[]{-14,231});
    states[231] = new State(-96);
    states[232] = new State(new int[]{40,233});
    states[233] = new State(new int[]{143,234});
    states[234] = new State(new int[]{40,100},new int[]{-14,235});
    states[235] = new State(new int[]{41,236});
    states[236] = new State(-97);
    states[237] = new State(new int[]{155,238});
    states[238] = new State(new int[]{40,239});
    states[239] = new State(new int[]{143,240});
    states[240] = new State(new int[]{40,100},new int[]{-14,241});
    states[241] = new State(new int[]{41,242});
    states[242] = new State(-98);
    states[243] = new State(-94);
    states[244] = new State(new int[]{138,149,163,21,142,171,144,182,158,199,154,230,155,232,156,237},new int[]{-15,245,-19,248,-20,147,-25,168,-13,169,-21,170,-22,181,-23,198,-24,227,-40,243});
    states[245] = new State(new int[]{153,246,138,149,163,21,142,171,144,182,158,199,154,230,155,232,156,237},new int[]{-19,146,-20,147,-25,168,-13,169,-21,170,-22,181,-23,198,-24,227,-40,243});
    states[246] = new State(new int[]{59,247});
    states[247] = new State(-18);
    states[248] = new State(-34);
    states[249] = new State(-9);
    states[250] = new State(new int[]{138,251});
    states[251] = new State(new int[]{126,252});
    states[252] = new State(new int[]{160,253});
    states[253] = new State(new int[]{59,254});
    states[254] = new State(-99);
    states[255] = new State(-10);
    states[256] = new State(new int[]{138,257});
    states[257] = new State(new int[]{140,258});
    states[258] = new State(new int[]{126,259});
    states[259] = new State(new int[]{162,260});
    states[260] = new State(new int[]{59,261});
    states[261] = new State(-100);
    states[262] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,127});
    rules[2] = new Rule(-1, new int[]{146,138,59,-3,147,59});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-3,-4});
    rules[5] = new Rule(-4, new int[]{-5});
    rules[6] = new Rule(-4, new int[]{-6});
    rules[7] = new Rule(-4, new int[]{-7});
    rules[8] = new Rule(-4, new int[]{-8});
    rules[9] = new Rule(-4, new int[]{-9});
    rules[10] = new Rule(-4, new int[]{-10});
    rules[11] = new Rule(-5, new int[]{148,138,61,-11,59,149,59});
    rules[12] = new Rule(-5, new int[]{148,138,61,-12,139,-11,59,149,59});
    rules[13] = new Rule(-5, new int[]{148,138,61,-11,59,-13,149,59});
    rules[14] = new Rule(-5, new int[]{148,138,61,-12,139,-11,59,-13,149,59});
    rules[15] = new Rule(-6, new int[]{148,138,61,150,-14,59,149,59});
    rules[16] = new Rule(-7, new int[]{148,138,61,151,-14,59,149,59});
    rules[17] = new Rule(-8, new int[]{152,138,-15,153,59});
    rules[18] = new Rule(-8, new int[]{152,138,59,-15,153,59});
    rules[19] = new Rule(-14, new int[]{40,-16,41});
    rules[20] = new Rule(-16, new int[]{138});
    rules[21] = new Rule(-16, new int[]{-16,44,138});
    rules[22] = new Rule(-17, new int[]{133});
    rules[23] = new Rule(-17, new int[]{130});
    rules[24] = new Rule(-17, new int[]{132});
    rules[25] = new Rule(-17, new int[]{129});
    rules[26] = new Rule(-17, new int[]{128});
    rules[27] = new Rule(-17, new int[]{131});
    rules[28] = new Rule(-17, new int[]{-17,40,128,41});
    rules[29] = new Rule(-17, new int[]{-17,40,128,41,141});
    rules[30] = new Rule(-11, new int[]{138});
    rules[31] = new Rule(-11, new int[]{-17});
    rules[32] = new Rule(-18, new int[]{128});
    rules[33] = new Rule(-18, new int[]{133});
    rules[34] = new Rule(-15, new int[]{-19});
    rules[35] = new Rule(-15, new int[]{-15,-19});
    rules[36] = new Rule(-19, new int[]{-20});
    rules[37] = new Rule(-19, new int[]{-13});
    rules[38] = new Rule(-19, new int[]{-21});
    rules[39] = new Rule(-19, new int[]{-22});
    rules[40] = new Rule(-19, new int[]{-23});
    rules[41] = new Rule(-19, new int[]{-24,59});
    rules[42] = new Rule(-20, new int[]{-25});
    rules[43] = new Rule(-20, new int[]{-20,-25});
    rules[44] = new Rule(-25, new int[]{138,58,-26,59});
    rules[45] = new Rule(-25, new int[]{138,58,145,-26,59});
    rules[46] = new Rule(-26, new int[]{-11});
    rules[47] = new Rule(-26, new int[]{-12,139,-11});
    rules[48] = new Rule(-26, new int[]{-12,139,142,-11});
    rules[49] = new Rule(-26, new int[]{-12,139,-12,139,-11});
    rules[50] = new Rule(-26, new int[]{-12,139,142,-12,139,-11});
    rules[51] = new Rule(-13, new int[]{163,-27});
    rules[52] = new Rule(-27, new int[]{-28});
    rules[53] = new Rule(-27, new int[]{-27,-28});
    rules[54] = new Rule(-28, new int[]{138,58,126,59});
    rules[55] = new Rule(-28, new int[]{138,58,164,165,-29,59});
    rules[56] = new Rule(-28, new int[]{138,58,164,-30,-18,59});
    rules[57] = new Rule(-28, new int[]{138,58,164,-30,138,59});
    rules[58] = new Rule(-28, new int[]{138,58,-31,-30,-18,59});
    rules[59] = new Rule(-28, new int[]{138,58,-31,-30,138,59});
    rules[60] = new Rule(-28, new int[]{138,58,123,-18,-30,164,-30,-18,125,59});
    rules[61] = new Rule(-30, new int[]{174});
    rules[62] = new Rule(-30, new int[]{175});
    rules[63] = new Rule(-30, new int[]{176});
    rules[64] = new Rule(-30, new int[]{177});
    rules[65] = new Rule(-30, new int[]{178});
    rules[66] = new Rule(-30, new int[]{61});
    rules[67] = new Rule(-29, new int[]{91,-32,93});
    rules[68] = new Rule(-32, new int[]{129});
    rules[69] = new Rule(-32, new int[]{-32,44,129});
    rules[70] = new Rule(-21, new int[]{142,-33});
    rules[71] = new Rule(-34, new int[]{138,58,138,59});
    rules[72] = new Rule(-34, new int[]{138,58,-16,59});
    rules[73] = new Rule(-33, new int[]{-34});
    rules[74] = new Rule(-33, new int[]{-33,-34});
    rules[75] = new Rule(-22, new int[]{144,-35});
    rules[76] = new Rule(-35, new int[]{-36});
    rules[77] = new Rule(-35, new int[]{-35,-36});
    rules[78] = new Rule(-36, new int[]{138,58,-12,139,138,140,138,59});
    rules[79] = new Rule(-36, new int[]{138,58,138,140,138,59});
    rules[80] = new Rule(-23, new int[]{158,-37});
    rules[81] = new Rule(-37, new int[]{-38});
    rules[82] = new Rule(-37, new int[]{-37,-38});
    rules[83] = new Rule(-38, new int[]{138,58,-11,173,126,59});
    rules[84] = new Rule(-38, new int[]{138,58,-12,139,-11,173,126,59});
    rules[85] = new Rule(-38, new int[]{138,58,-12,139,-12,139,-11,173,126,59});
    rules[86] = new Rule(-38, new int[]{-31,58,-11,173,126,59});
    rules[87] = new Rule(-39, new int[]{128});
    rules[88] = new Rule(-39, new int[]{138});
    rules[89] = new Rule(-39, new int[]{63});
    rules[90] = new Rule(-12, new int[]{136,91,128,58,-39,93});
    rules[91] = new Rule(-12, new int[]{135,91,128,58,-39,93});
    rules[92] = new Rule(-12, new int[]{134,91,128,58,-39,93});
    rules[93] = new Rule(-12, new int[]{137,91,128,58,-39,93});
    rules[94] = new Rule(-24, new int[]{-40});
    rules[95] = new Rule(-24, new int[]{-24,-40});
    rules[96] = new Rule(-40, new int[]{154,-14});
    rules[97] = new Rule(-40, new int[]{155,40,143,-14,41});
    rules[98] = new Rule(-40, new int[]{156,155,40,143,-14,41});
    rules[99] = new Rule(-9, new int[]{159,138,126,160,59});
    rules[100] = new Rule(-10, new int[]{161,138,140,126,162,59});
    rules[101] = new Rule(-31, new int[]{138,46,138});
    rules[102] = new Rule(-31, new int[]{-31,46,138});
    rules[103] = new Rule(-31, new int[]{164,179,-31});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // schema_definition -> SCHEMA, IDENTIFIER, ';', definitions, END_SCHEMA, ';'
#line 89 "Parser.y"
{ Model.Schema.Name = ValueStack[ValueStack.Depth-5].strVal; Model.Schema.Identification = ValueStack[ValueStack.Depth-5].strVal; Finish();}
        break;
      case 11: // type_definition -> TYPE, IDENTIFIER, '=', identifier_or_type, ';', END_TYPE, 
               //                    ';'
#line 107 "Parser.y"
{ CreateType(ValueStack[ValueStack.Depth-6].strVal); }
        break;
      case 12: // type_definition -> TYPE, IDENTIFIER, '=', enumerable, OF, identifier_or_type, 
               //                    ';', END_TYPE, ';'
#line 108 "Parser.y"
{ CreateType(ValueStack[ValueStack.Depth-8].strVal); }
        break;
      case 13: // type_definition -> TYPE, IDENTIFIER, '=', identifier_or_type, ';', 
               //                    where_section, END_TYPE, ';'
#line 109 "Parser.y"
{ CreateType(ValueStack[ValueStack.Depth-7].strVal); }
        break;
      case 14: // type_definition -> TYPE, IDENTIFIER, '=', enumerable, OF, identifier_or_type, 
               //                    ';', where_section, END_TYPE, ';'
#line 110 "Parser.y"
{ CreateType(ValueStack[ValueStack.Depth-9].strVal); }
        break;
      case 15: // enumeration -> TYPE, IDENTIFIER, '=', ENUMERATION_OF, identifier_list, ';', 
               //                END_TYPE, ';'
#line 114 "Parser.y"
{ CreateEnumeration(ValueStack[ValueStack.Depth-7].strVal, (List<string>)(ValueStack[ValueStack.Depth-4].val)); }
        break;
      case 16: // select_type -> TYPE, IDENTIFIER, '=', SELECT, identifier_list, ';', END_TYPE, 
               //                ';'
#line 118 "Parser.y"
{ CreateSelectType(ValueStack[ValueStack.Depth-7].strVal, (List<string>)(ValueStack[ValueStack.Depth-4].val)); }
        break;
      case 17: // entity -> ENTITY, IDENTIFIER, sections, END_ENTITY, ';'
#line 122 "Parser.y"
{ CreateEntity(ValueStack[ValueStack.Depth-4].strVal, ValueStack[ValueStack.Depth-3].val as List<ValueType>); }
        break;
      case 18: // entity -> ENTITY, IDENTIFIER, ';', sections, END_ENTITY, ';'
#line 123 "Parser.y"
{ CreateEntity(ValueStack[ValueStack.Depth-5].strVal, ValueStack[ValueStack.Depth-3].val as List<ValueType>); }
        break;
      case 19: // identifier_list -> '(', identifiers, ')'
#line 127 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-2].val; }
        break;
      case 20: // identifiers -> IDENTIFIER
#line 131 "Parser.y"
{ CurrentSemanticValue.val = new List<string>(){ValueStack[ValueStack.Depth-1].strVal}; }
        break;
      case 21: // identifiers -> identifiers, ',', IDENTIFIER
#line 132 "Parser.y"
{ var list = (List<string>)(ValueStack[ValueStack.Depth-3].val); list.Add(ValueStack[ValueStack.Depth-1].strVal); CurrentSemanticValue.val = list; }
        break;
      case 22: // type -> REAL
#line 136 "Parser.y"
{ CurrentSemanticValue.val = Model.PredefinedSimpleTypes.RealType; }
        break;
      case 23: // type -> BOOLEAN
#line 137 "Parser.y"
{ CurrentSemanticValue.val = Model.PredefinedSimpleTypes.BooleanType; }
        break;
      case 24: // type -> BINARY
#line 138 "Parser.y"
{ CurrentSemanticValue.val = Model.PredefinedSimpleTypes.BinaryType; }
        break;
      case 25: // type -> STRING
#line 139 "Parser.y"
{ CurrentSemanticValue.val = Model.PredefinedSimpleTypes.StringType; }
        break;
      case 26: // type -> INTEGER
#line 140 "Parser.y"
{ CurrentSemanticValue.val = Model.PredefinedSimpleTypes.IntegerType; }
        break;
      case 27: // type -> LOGICAL
#line 141 "Parser.y"
{ CurrentSemanticValue.val = Model.PredefinedSimpleTypes.LogicalType; }
        break;
      case 28: // type -> type, '(', INTEGER, ')'
#line 142 "Parser.y"
{ CurrentSemanticValue.val = Model.New<ArrayType>(t => {t.ElementType = ValueStack[ValueStack.Depth-4].val as BaseType; t.UpperIndex = ValueStack[ValueStack.Depth-2].intVal;}); }
        break;
      case 29: // type -> type, '(', INTEGER, ')', FIXED
#line 143 "Parser.y"
{ CurrentSemanticValue.val = Model.New<ArrayType>(t => {t.ElementType = ValueStack[ValueStack.Depth-5].val as BaseType; t.UpperIndex = ValueStack[ValueStack.Depth-3].intVal;}); }
        break;
      case 30: // identifier_or_type -> IDENTIFIER
#line 147 "Parser.y"
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; CurrentSemanticValue.tokVal = Tokens.IDENTIFIER; }
        break;
      case 31: // identifier_or_type -> type
#line 148 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val; CurrentSemanticValue.tokVal = Tokens.TYPE; }
        break;
      case 34: // sections -> section
#line 157 "Parser.y"
{ CurrentSemanticValue.val = new List<ValueType>{(ValueType)ValueStack[ValueStack.Depth-1]}; }
        break;
      case 35: // sections -> sections, section
#line 158 "Parser.y"
{ (ValueStack[ValueStack.Depth-2].val as List<ValueType>).Add((ValueType)ValueStack[ValueStack.Depth-1]); CurrentSemanticValue.val = ValueStack[ValueStack.Depth-2].val;}
        break;
      case 36: // section -> parameter_section
#line 162 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val; CurrentSemanticValue.tokVal = Tokens.SELF; }
        break;
      case 37: // section -> where_section
#line 163 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val; CurrentSemanticValue.tokVal = Tokens.WHERE; }
        break;
      case 38: // section -> unique_section
#line 164 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val; CurrentSemanticValue.tokVal = Tokens.UNIQUE; }
        break;
      case 39: // section -> inverse_section
#line 165 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val; CurrentSemanticValue.tokVal = Tokens.INVERSE; }
        break;
      case 40: // section -> derive_section
#line 166 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val; CurrentSemanticValue.tokVal = Tokens.DERIVE; }
        break;
      case 41: // section -> inheritance_section, ';'
#line 167 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-2].val; CurrentSemanticValue.tokVal = Tokens.ABSTRACT; }
        break;
      case 42: // parameter_section -> parameter_definition
#line 171 "Parser.y"
{ CurrentSemanticValue.val = new List<ExplicitAttribute>{ ValueStack[ValueStack.Depth-1].val as ExplicitAttribute }; }
        break;
      case 43: // parameter_section -> parameter_section, parameter_definition
#line 172 "Parser.y"
{ (ValueStack[ValueStack.Depth-2].val as List<ExplicitAttribute>).Add(ValueStack[ValueStack.Depth-1].val as ExplicitAttribute); CurrentSemanticValue.val = ValueStack[ValueStack.Depth-2].val; }
        break;
      case 44: // parameter_definition -> IDENTIFIER, ':', parameter_definition_right, ';'
#line 176 "Parser.y"
{ CurrentSemanticValue.val = NameAttribute((ExplicitAttribute)(ValueStack[ValueStack.Depth-2].val), ValueStack[ValueStack.Depth-4].strVal, false); }
        break;
      case 45: // parameter_definition -> IDENTIFIER, ':', OPTIONAL, parameter_definition_right, 
               //                         ';'
#line 177 "Parser.y"
{ CurrentSemanticValue.val = NameAttribute((ExplicitAttribute)(ValueStack[ValueStack.Depth-2].val), ValueStack[ValueStack.Depth-5].strVal, true); }
        break;
      case 46: // parameter_definition_right -> identifier_or_type
#line 181 "Parser.y"
{ CurrentSemanticValue.val = CreateSimpleAttribute(ValueStack[ValueStack.Depth-1]); }
        break;
      case 47: // parameter_definition_right -> enumerable, OF, identifier_or_type
#line 182 "Parser.y"
{ CurrentSemanticValue.val = CreateEnumerableAttribute(ValueStack[ValueStack.Depth-3].val as AggregationType, ValueStack[ValueStack.Depth-1], false); }
        break;
      case 48: // parameter_definition_right -> enumerable, OF, UNIQUE, identifier_or_type
#line 183 "Parser.y"
{ CurrentSemanticValue.val = CreateEnumerableAttribute(ValueStack[ValueStack.Depth-4].val as AggregationType, ValueStack[ValueStack.Depth-1], true); }
        break;
      case 49: // parameter_definition_right -> enumerable, OF, enumerable, OF, 
               //                               identifier_or_type
#line 184 "Parser.y"
{ CurrentSemanticValue.val = CreateEnumerableOfEnumerableAttribute(ValueStack[ValueStack.Depth-5].val as AggregationType, ValueStack[ValueStack.Depth-3].val as AggregationType, ValueStack[ValueStack.Depth-1], false); }
        break;
      case 50: // parameter_definition_right -> enumerable, OF, UNIQUE, enumerable, OF, 
               //                               identifier_or_type
#line 185 "Parser.y"
{ CurrentSemanticValue.val = CreateEnumerableOfEnumerableAttribute(ValueStack[ValueStack.Depth-6].val as AggregationType, ValueStack[ValueStack.Depth-3].val as AggregationType, ValueStack[ValueStack.Depth-1], true); }
        break;
      case 54: // where_rule -> IDENTIFIER, ':', error, ';'
#line 198 "Parser.y"
{ yyerrok(); }
        break;
      case 67: // string_array -> '[', strings, ']'
#line 217 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-2].val; }
        break;
      case 68: // strings -> STRING
#line 221 "Parser.y"
{ CurrentSemanticValue.val = new List<string>() { ValueStack[ValueStack.Depth-1].strVal }; }
        break;
      case 69: // strings -> strings, ',', STRING
#line 222 "Parser.y"
{ var list = (List<string>)(ValueStack[ValueStack.Depth-3].val); list.Add(ValueStack[ValueStack.Depth-1].strVal); CurrentSemanticValue.val = list; }
        break;
      case 83: // derive_rule -> IDENTIFIER, ':', identifier_or_type, ASSIGNMENT, error, ';'
#line 263 "Parser.y"
{ yyerrok(); }
        break;
      case 84: // derive_rule -> IDENTIFIER, ':', enumerable, OF, identifier_or_type, ASSIGNMENT, 
               //                error, ';'
#line 264 "Parser.y"
{ yyerrok(); }
        break;
      case 85: // derive_rule -> IDENTIFIER, ':', enumerable, OF, enumerable, OF, 
               //                identifier_or_type, ASSIGNMENT, error, ';'
#line 265 "Parser.y"
{ yyerrok(); }
        break;
      case 86: // derive_rule -> accessor, ':', identifier_or_type, ASSIGNMENT, error, ';'
#line 266 "Parser.y"
{ yyerrok(); }
        break;
      case 90: // enumerable -> SET, '[', INTEGER, ':', optional_integer, ']'
#line 276 "Parser.y"
{ CurrentSemanticValue.val = Model.New<SetType>(); }
        break;
      case 91: // enumerable -> LIST, '[', INTEGER, ':', optional_integer, ']'
#line 277 "Parser.y"
{ CurrentSemanticValue.val = Model.New<ListType>(); }
        break;
      case 92: // enumerable -> ARRAY, '[', INTEGER, ':', optional_integer, ']'
#line 278 "Parser.y"
{ CurrentSemanticValue.val = Model.New<ArrayType>(); }
        break;
      case 93: // enumerable -> BAG, '[', INTEGER, ':', optional_integer, ']'
#line 279 "Parser.y"
{ CurrentSemanticValue.val = Model.New<BagType>(); }
        break;
      case 94: // inheritance_section -> inheritance_definition
#line 283 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val; CurrentSemanticValue.tokVal = ValueStack[ValueStack.Depth-1].tokVal; }
        break;
      case 95: // inheritance_section -> inheritance_section, inheritance_definition
#line 284 "Parser.y"
{CurrentSemanticValue.val = ValueStack[ValueStack.Depth-2].val ?? ValueStack[ValueStack.Depth-1].val; if (ValueStack[ValueStack.Depth-2].tokVal == Tokens.ABSTRACT || ValueStack[ValueStack.Depth-1].tokVal == Tokens.ABSTRACT) CurrentSemanticValue.tokVal = Tokens.ABSTRACT; else CurrentSemanticValue.tokVal = Tokens.NON_ABSTRACT;}
        break;
      case 96: // inheritance_definition -> SUBTYPE_OF, identifier_list
#line 288 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val; CurrentSemanticValue.tokVal = Tokens.NON_ABSTRACT; }
        break;
      case 97: // inheritance_definition -> SUPERTYPE_OF, '(', ONEOF, identifier_list, ')'
#line 289 "Parser.y"
{ CurrentSemanticValue.tokVal = Tokens.NON_ABSTRACT;  }
        break;
      case 98: // inheritance_definition -> ABSTRACT, SUPERTYPE_OF, '(', ONEOF, identifier_list, 
               //                           ')'
#line 290 "Parser.y"
{ CurrentSemanticValue.tokVal = Tokens.ABSTRACT;  }
        break;
      case 99: // function -> FUNCTION, IDENTIFIER, error, END_FUNCTION, ';'
#line 294 "Parser.y"
{ yyerrok(); }
        break;
      case 100: // rule -> RULE, IDENTIFIER, FOR, error, END_RULE, ';'
#line 299 "Parser.y"
{ yyerrok(); }
        break;
      case 101: // accessor -> IDENTIFIER, '.', IDENTIFIER
#line 303 "Parser.y"
{ CurrentSemanticValue.val = new List<string>(){ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-2].strVal}; }
        break;
      case 102: // accessor -> accessor, '.', IDENTIFIER
#line 304 "Parser.y"
{ var list = (List<string>)(ValueStack[ValueStack.Depth-3].val); list.Add(ValueStack[ValueStack.Depth-1].strVal); CurrentSemanticValue.val = list; }
        break;
      case 103: // accessor -> SELF, BACKSLASH, accessor
#line 305 "Parser.y"
{ CurrentSemanticValue.val = ValueStack[ValueStack.Depth-1].val; }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
